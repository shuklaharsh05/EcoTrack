'use client';

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { ArrowLeft, ChevronDown, ChevronUp, Leaf, Search } from 'lucide-react';
import { Input } from '@/components/ui/input';
import Footer from '@/components/ui/footer';
import Link from 'next/link';

interface FAQItem {
  question: string;
  answer: string;
  category: string;
}

const faqs: FAQItem[] = [
  {
    question: "What is a carbon footprint?",
    answer: "A carbon footprint is the total amount of greenhouse gases (including carbon dioxide and methane) that are generated by our actions. It's measured in units of carbon dioxide equivalent (CO2e).",
    category: "Basics"
  },
  {
    question: "How does EcoTrack calculate my carbon footprint?",
    answer: "EcoTrack calculates your carbon footprint based on various factors including your transportation habits, energy usage, diet, and lifestyle choices. We use scientifically validated emission factors to provide accurate estimates.",
    category: "Basics"
  },
  {
    question: "What are carbon credits?",
    answer: "Carbon credits are certificates representing the reduction of one metric ton of carbon dioxide emissions. They are used to offset emissions by funding projects that reduce or remove greenhouse gases from the atmosphere.",
    category: "Carbon Credits"
  },
  {
    question: "How can I reduce my carbon footprint?",
    answer: "You can reduce your carbon footprint by making sustainable choices in your daily life, such as using public transportation, reducing meat consumption, using energy-efficient appliances, and supporting renewable energy sources.",
    category: "Sustainability"
  },
  {
    question: "What types of projects do carbon credits support?",
    answer: "Carbon credits support various projects including renewable energy installations, forest conservation, reforestation, and community-based sustainable development initiatives.",
    category: "Carbon Credits"
  },
  {
    question: "How accurate are the carbon footprint calculations?",
    answer: "Our calculations are based on peer-reviewed scientific data and industry-standard emission factors. While we strive for accuracy, the results are estimates based on the information provided.",
    category: "Basics"
  },
  {
    question: "Can I track my progress over time?",
    answer: "Yes! EcoTrack allows you to monitor your carbon footprint over time, set reduction goals, and track your progress through detailed analytics and visualizations.",
    category: "Features"
  },
  {
    question: "What is the difference between carbon reduction and carbon offsetting?",
    answer: "Carbon reduction involves directly reducing your emissions through lifestyle changes, while carbon offsetting involves compensating for your emissions by supporting projects that reduce emissions elsewhere.",
    category: "Basics"
  },
  {
    question: "How do I verify the impact of my carbon credits?",
    answer: "All carbon credits in our marketplace are verified by independent third-party organizations and come with detailed documentation of their environmental impact.",
    category: "Carbon Credits"
  },
  {
    question: "What makes a good carbon offset project?",
    answer: "A good carbon offset project should be additional (wouldn't happen without funding), permanent, verifiable, and have no negative social or environmental impacts.",
    category: "Carbon Credits"
  }
];

export default function FAQPage() {
  const [searchTerm, setSearchTerm] = useState('');
  const [expandedItems, setExpandedItems] = useState<number[]>([]);
  const [selectedCategory, setSelectedCategory] = useState<string>('All');

  const categories = ['All', ...Array.from(new Set(faqs.map(faq => faq.category)))];

  const filteredFaqs = faqs.filter(faq => {
    const matchesSearch = faq.question.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         faq.answer.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesCategory = selectedCategory === 'All' || faq.category === selectedCategory;
    return matchesSearch && matchesCategory;
  });

  const toggleItem = (index: number) => {
    setExpandedItems(prev =>
      prev.includes(index)
        ? prev.filter(i => i !== index)
        : [...prev, index]
    );
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-emerald-50 via-white to-green-50">
      {/* Header */}
      <div className="bg-white border-b border-gray-200">
        <div className="max-w-4xl mx-auto px-4 py-6">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <Link href="/" className="flex items-center space-x-2">
                <Leaf className="h-6 w-6 text-emerald-600" />
                <span className="text-xl font-bold text-gray-900">EcoTrack</span>
              </Link>
              <span className="text-gray-400">/</span>
              <span className="text-gray-600">FAQs</span>
            </div>
            <Link href="/">
              <Button variant="outline">
                <ArrowLeft className="h-4 w-4 mr-2" />
                Back to Home
              </Button>
            </Link>
          </div>
        </div>
      </div>

      <div className="max-w-4xl mx-auto px-4 py-12">
        <div className="text-center mb-12">
          <h1 className="text-4xl font-bold text-gray-900 mb-4">Frequently Asked Questions</h1>
          <p className="text-xl text-gray-600">
            Find answers to common questions about carbon tracking and sustainability
          </p>
        </div>

        {/* Search and Filter */}
        <div className="mb-8 space-y-4">
          <div className="relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
            <Input
              type="text"
              placeholder="Search questions..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="pl-10"
            />
          </div>
          <div className="flex flex-wrap gap-2">
            {categories.map(category => (
              <Button
                key={category}
                variant={selectedCategory === category ? "active" : "outline"}
                onClick={() => setSelectedCategory(category)}
                className=""
              >
                {category}
              </Button>
            ))}
          </div>
        </div>

        {/* FAQ Items */}
        <div className="space-y-4">
          {filteredFaqs.map((faq, index) => (
            <Card key={index} className="border-0 shadow-lg">
              <CardContent className="p-6">
                <button
                  onClick={() => toggleItem(index)}
                  className="w-full flex justify-between items-center text-left"
                >
                  <div>
                    <span className="text-sm font-medium text-emerald-600 mb-1 block">
                      {faq.category}
                    </span>
                    <h3 className="text-lg font-semibold text-gray-900">
                      {faq.question}
                    </h3>
                  </div>
                  <div className="transition-transform duration-200 ease-in-out">
                    {expandedItems.includes(index) ? (
                      <ChevronUp className="h-5 w-5 text-gray-400" />
                    ) : (
                      <ChevronDown className="h-5 w-5 text-gray-400" />
                    )}
                  </div>
                </button>
                <div 
                  className={`grid transition-all duration-200 ease-in-out ${
                    expandedItems.includes(index) 
                      ? 'grid-rows-[1fr] opacity-100' 
                      : 'grid-rows-[0fr] opacity-0'
                  }`}
                >
                  <div className="overflow-hidden">
                    <div className="mt-4 text-gray-600">
                      {faq.answer}
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>

        {/* No Results */}
        {filteredFaqs.length === 0 && (
          <div className="text-center py-12">
            <p className="text-gray-600">No questions found matching your search criteria.</p>
            <Button
              variant="outline"
              onClick={() => {
                setSearchTerm('');
                setSelectedCategory('All');
              }}
              className="mt-4"
            >
              Clear Filters
            </Button>
          </div>
        )}
      </div>

      <Footer />
    </div>
  );
} 